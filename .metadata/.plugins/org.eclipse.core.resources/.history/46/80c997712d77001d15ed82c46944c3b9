/**
 * 
 */
package com.camilodelvalle.reto.controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.camilodelvalle.reto.entity.Affiliates;
import com.camilodelvalle.reto.service.AffiliatesService;


/**
 * @author Camilo Del Valle
 * @version 1.0 1/12/2022 
 * Controlador que manipula el flujo de los servicios REST del microservicio affiliates.
 */

@RestController
@RequestMapping("/affiliates")
public class AffiliatesController {
	
	@Autowired
	private AffiliatesService affiliatesServiceImpl;
	
	@GetMapping
	@RequestMapping(value = "getList", method = RequestMethod.GET)
	public ResponseEntity<?> getList() {
		List<Affiliates> affiliatesConsultados = this.affiliatesServiceImpl.getList();
		if (affiliatesConsultados.isEmpty()) {
			return ResponseEntity.noContent().build();
		} else {
			return ResponseEntity.ok(affiliatesConsultados);
		}
	}
	
	@GetMapping
	@RequestMapping(value = "getById/{id}", method = RequestMethod.GET)
	public ResponseEntity<?> getById(@PathVariable Integer id) {
		Optional<Affiliates> affiliatesConsultadosUsuario = this.affiliatesServiceImpl.getById(id);
		return ResponseEntity.ok(affiliatesConsultadosUsuario);
	}
	
	@PostMapping
	@RequestMapping(value = "post", method = RequestMethod.POST)
	public ResponseEntity<?> post(@RequestBody Affiliates affiliates) {
		Affiliates affiliatesGuardado = this.affiliatesServiceImpl.post(affiliates);
		return ResponseEntity.status(HttpStatus.CREATED).body(affiliatesGuardado);
	}

	@PutMapping
	@RequestMapping(value = "put", method = RequestMethod.PUT)
	public ResponseEntity<?> put(@RequestBody Affiliates affiliates) {
		Optional<Affiliates> affiliatesActualizado = this.affiliatesServiceImpl.put(affiliates);
		
		if(affiliatesActualizado.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		} else {
			return ResponseEntity.status(HttpStatus.CREATED).body(affiliatesActualizado);
		}
	}

	@DeleteMapping
	@RequestMapping(value = "deleteId/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<?> deleteId(@PathVariable Integer id) {
		Map<String,Object> response = new HashMap<>();
		if (id == null) {
			return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
		} else {
			this.affiliatesServiceImpl.deleteId(id);
			return ResponseEntity.ok().build();
		}
	}

}