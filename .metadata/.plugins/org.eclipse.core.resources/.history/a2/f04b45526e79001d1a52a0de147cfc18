package com.camilodelvalle.reto.controllers;

import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;

import com.camilodelvalle.reto.entity.Affiliates;
import com.camilodelvalle.reto.service.AffiliatesService;

@ExtendWith(MockitoExtension.class)//Para crear el mock
class AffiliatesControllerTest {

	@InjectMocks
	private AffiliatesController affiliatesController = new AffiliatesController(); //se crea un objeto de la clase controlador
	
	
	@Mock
	private AffiliatesService serviceAffiliatesMock;
	
	@Test
	void testGetAffiliateEmpty() {
		when(serviceAffiliatesMock.getList()).thenReturn(Collections.emptyList());
		var response = affiliatesController.getList();
		Assertions.assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
	}	
	
	@Test
	void testGetListAffiliate() {
		List<Affiliates> toCheckList = new ArrayList<Affiliates>();
		toCheckList.add(new Affiliates());
		when(serviceAffiliatesMock.getList()).thenReturn(toCheckList);
		var response = affiliatesController.getList();
		Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
	}
	
	@Test
	void testGetByIdAffiliateEmpty() {
		when(serviceAffiliatesMock.getById(null)).thenReturn(Optional.empty());
		var response = affiliatesController.getById(null);
		Assertions.assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
	}
	
	@Test
	void testGetByIdListAffiliate() {
		Affiliates affiliateGetByIdMock = new Affiliates();
		when(serviceAffiliatesMock.getById(anyInt())).thenReturn(Optional.of(affiliateGetByIdMock));
		var response = affiliatesController.getById(anyInt());
		Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
	}
	
	@Test
	void testPostEmpty() {
		Affiliates affiliatePostEmptyMock = new Affiliates();
		doThrow(new RuntimeException()).when(serviceAffiliatesMock).post(affiliatePostEmptyMock);
        var response = affiliatesController.post(affiliatePostEmptyMock);
        Assertions.assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
	}
	
	
	@Test
	void testPost() {
		Affiliates affiliatePostMock = new Affiliates();
		when(serviceAffiliatesMock.post(affiliatePostMock)).thenReturn(affiliatePostMock);
		var response = affiliatesController.post(affiliatePostMock);
		Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
	}
	
	
}
